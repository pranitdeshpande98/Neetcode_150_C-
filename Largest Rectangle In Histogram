class Solution {
public:
    vector<int> left;
    vector<int> right;
    int n;

    void nearestsmallestleft(vector<int> &heights, vector<int> &left, int n){
        stack<pair<int, int>> st; //index & element
        for(int i = 0 ; i < n; i++){
            while(st.size() > 0 && st.top().second >= heights[i]){
                st.pop();
            }
            if(st.empty()) left.push_back(-1);
            else{
                left.push_back(st.top().first);
            }
            st.push({i, heights[i]});
        }
    }

    void nearestsmallestright(vector<int> &heights, vector<int> &right, int n){
        stack<pair<int, int>> st;
        for(int i = n-1; i >= 0 ; i--){
            while(st.size() > 0 && st.top().second >= heights[i]){
                st.pop();
            }
            if(st.empty()) right.push_back(n);
            else{
                right.push_back(st.top().first);
            }
            st.push({i, heights[i]});
        }
        reverse(right.begin(), right.end());
    }

    int largestRectangleArea(vector<int>& heights) {
        n = heights.size();
        nearestsmallestleft(heights, left, n);
        nearestsmallestright(heights, right, n);

        vector<int> width(n);
        int maxarea = INT_MIN;
        for(int i =0 ; i < n; i++){
            width[i] = right[i] - left[i] - 1; 
            maxarea = max(maxarea, width[i] * heights[i]);
        }
        return maxarea;
    }
};

/*
Based on the intuition we need to calculate the width which is equal to (NSR - NSL -1)
THe area of the histogram is width (calculated above) * heights[i]
Get the maximum of the step 2.
*/
