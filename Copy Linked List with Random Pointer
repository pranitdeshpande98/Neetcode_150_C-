// APproach 1

/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* next;
    Node* random;
    
    Node(int _val) {
        val = _val;
        next = NULL;
        random = NULL;
    }
};
*/

class Solution {
public:
    Node* copyRandomList(Node* head) {
        unordered_map<Node*, Node*>mp;
        if(head == NULL) return NULL;

        Node *current = head;
        Node *prev = NULL;
        Node *newHead = NULL;
        while(current){
            Node *temp = new Node(current->val);
            mp[current] = temp;
            if(newHead == NULL){
                newHead = temp;
                prev = newHead;
            } else {
                prev->next = temp;
                prev=temp;
            }
            current = current->next;
        }
        current = head;
        Node *newcurrent = newHead;

        while(current){
            if(current->random == NULL) {
                newcurrent->random = NULL;
            }
            else{
                newcurrent->random = mp[current->random];
            }
            current=current->next;
            newcurrent=newcurrent->next;
        }
        return newHead;
    }
};
