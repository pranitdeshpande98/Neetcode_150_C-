// Approach 1

class Solution {
public:
    void solve(vector<int> &candidates, int target, int idx, vector<int> &temp, set<vector<int>> &st){
        if(idx >= candidates.size()){
            if(target == 0){
                st.insert(temp);
            }
            return;
        }

        if(target < 0 ) return;
        temp.push_back(candidates[idx]); 
        solve(candidates, target-candidates[idx], idx+1, temp, st);
        temp.pop_back();

        while(idx+1 < candidates.size() && candidates[idx] == candidates[idx+1]){
            idx++;
        }
        solve(candidates, target, idx+1, temp, st);
    }
    vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {
        set<vector<int>> st;
        sort(candidates.begin(), candidates.end());
        vector<int> temp;
        solve(candidates, target, 0, temp, st);
        return vector<vector<int>> (st.begin(),st.end());

    }
};

// Approach 2

class Solution {
public:
    vector<vector<int>> result;
    void solve(vector<int> &candidates, int target, int idx, vector<int> &temp){
        if(idx >= candidates.size()){
            if(target == 0){
                result.push_back(temp);
            }
            return;
        }

        if(target < 0 ) return;
        temp.push_back(candidates[idx]); 
        solve(candidates, target-candidates[idx], idx+1, temp);
        temp.pop_back();

        while(idx+1 < candidates.size() && candidates[idx] == candidates[idx+1]){
            idx++;
        }
        solve(candidates, target, idx+1, temp);
    }
    vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {
        sort(candidates.begin(), candidates.end());
        vector<int> temp;
        solve(candidates, target, 0, temp);
        return result;
    }
};
