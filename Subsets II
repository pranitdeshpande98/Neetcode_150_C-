// Approach 1

class Solution {
public:
    //ector<vector<int>> result;

    void solve(vector<int> &nums, int idx, set<vector<int>> &st, vector<int> &temp){
        if(idx >= nums.size()){
            st.insert(temp);
            return;
        }

        temp.push_back(nums[idx]);
        solve(nums, idx+1, st, temp);
        temp.pop_back();
        solve(nums, idx+1, st, temp);
    }
    vector<vector<int>> subsetsWithDup(vector<int>& nums) {
        set<vector<int>>st;  
        vector<int>temp;  
        sort(nums.begin(), nums.end());    
        solve(nums, 0, st, temp);
        return vector<vector<int>>(st.begin(), st.end());
    }
};


// Approach 2

class Solution {
public:
    vector<vector<int>> result;

    void solve(vector<int> &nums, int idx, vector<int> &temp){
        if(idx >= nums.size()){
            result.push_back(temp);
            return;
        }

        temp.push_back(nums[idx]);
        solve(nums, idx+1, temp);

        while(idx +1 < nums.size() && nums[idx] == nums[idx+1]){
            idx++;
        }
        temp.pop_back();
        solve(nums, idx+1, temp);
    }
    vector<vector<int>> subsetsWithDup(vector<int>& nums) {
        vector<int>temp;  
        sort(nums.begin(), nums.end());    
        solve(nums, 0, temp);
        return result;
    }
};

