// Approach 1

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

class Solution {
public:

    void preorder(TreeNode *root, vector<int> &result){
        if(!root) return;
        result.push_back(root->val);
        preorder(root->left, result);
        preorder(root->right, result);
    }
    int kthSmallest(TreeNode* root, int k) {
        vector<int> result;
        preorder(root, result);
        sort(result.begin(), result.end());

        return result[k-1];
    }
};


// Approach 2

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

class Solution {
public:

    void inorder(TreeNode *root, int& counter, int k , int &kthSmallest){
        if(!root || counter >= k) return;
        inorder(root->left, counter, k, kthSmallest);
        counter++;
        if(counter == k){
            kthSmallest = root->val;
            return;
        }
        inorder(root->right, counter, k, kthSmallest);

    }
    int kthSmallest(TreeNode* root, int k) {
        int kthSmallest =-1;
        int counter = 0;
        inorder(root, counter, k, kthSmallest);
        return kthSmallest;
    }
};
