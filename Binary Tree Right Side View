// Approach 1

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

class Solution {
public:
    vector<int> rightSideView(TreeNode* root) {
        queue<TreeNode*>q;
        vector<vector<int>> bfs;
        vector<int>result;
        if(root) q.push(root);
        while(!q.empty()){
            vector<int>val;
            int size = q.size();
            while(size--){
                TreeNode *node = q.front();
                q.pop();
                val.push_back(node->val);
                if(node->left) q.push(node->left);
                if(node->right) q.push(node->right);
            }
            bfs.push_back(val);
        }

        for(int i = 0 ; i < bfs.size(); i++){
            result.push_back(bfs[i].back());
        }
        return result;
    }
};


// Approach 2
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

class Solution {
public:
    vector<int> rightSideView(TreeNode* root) {
        vector<int> result;
        queue<TreeNode*>q;
        if(root) q.push(root);
        while(!q.empty()){
            int size = q.size();
            int lastnodeval = 0;
            while(size--){
                TreeNode *node = q.front();
                q.pop();
                lastnodeval = node->val;

                if(node->left) q.push(node->left);
                if(node->right)q.push(node->right);
            }
            result.push_back(lastnodeval);
        }
        return result;
    }
};


//Approach 3
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

class Solution {
public:

    void preorder(TreeNode *root, int level, vector<int> &result){
        if(root==NULL) return;
        if(level >result.size()) result.push_back(root->val);
        preorder(root->right, level+1, result);
        preorder(root->left, level+1, result);
    }
    vector<int> rightSideView(TreeNode* root) {
        vector<int>result;
        preorder(root, 1, result);
        return result;
    }
};
