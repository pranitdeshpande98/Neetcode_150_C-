/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

class Solution {
public:

    int dfs(TreeNode *root, int maxval){
        if(!root) return 0;
        int result = (root->val >= maxval) ? 1 :0;
        maxval = max(maxval, root->val);
        result += dfs(root->left, maxval);
        result += dfs(root->right, maxval);
        return result;
    }
    int goodNodes(TreeNode* root) {
        return dfs(root, root->val);
    }


};

// Approach 2
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

class Solution {
public:
    int goodNodes(TreeNode* root) {
        queue<pair<TreeNode*, int>>q;
        int result =0;
        if(root) q.push({root, -INT_MAX});
        while(!q.empty()){
            auto [node, maxval] = q.front();
            q.pop();
            if(node->val >= maxval) result++;
            if(node->left) q.push({node->left, max(maxval, node->val)});
            if(node->right) q.push({node->right, max(maxval, node->val)});
        }
        return result;
    }
};
