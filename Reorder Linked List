// Approach 1

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */

class Solution {
public:

    ListNode *reverseLinkedList(ListNode *head){
        if(head == NULL || head->next == NULL) return head;
        ListNode *last = reverseLinkedList(head->next);
        head->next->next = head;
        head->next = NULL;
        return last;
    }
    void reorderList(ListNode* head) {
        ListNode *slow =head;
        ListNode *fast = head;
        while(fast && fast->next){
            slow = slow->next;
            fast = fast->next->next;   
        }
        ListNode *rev = reverseLinkedList(slow);
        ListNode *current = head;
        while(rev->next != NULL){
            ListNode *temp = current->next;
            current->next = rev;
            ListNode *revtemp = rev->next;
            rev->next = temp;
            current = temp;
            rev=revtemp;
        }
    }
};


// Approach 2
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */

class Solution {
public:
    void reorderList(ListNode* head) {
        stack<ListNode*>st;
        ListNode *curr = head;
        while(curr){
            st.push(curr);
            curr=curr->next;
        }
        int k = st.size()/2;
        curr=head;
        while(k--){
            ListNode *topNode = st.top();
            st.pop();

            ListNode *temp = curr->next;
            curr->next = topNode;

            topNode->next = temp;
            curr=temp;
        }
        curr->next=NULL;
    }
};


//Approach 3
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */

class Solution {
public:
    ListNode *curr;

    void solve(ListNode *head){
        if(head == NULL) return;
    

    solve(head->next);
    ListNode *temp = curr->next;
    if(curr->next == NULL) return;
    else if (head == curr){
        head->next = curr;
        return;
    } 
    curr->next = head;
    head->next = (temp == head) ? NULL : temp;
    curr=temp;
    }
    void reorderList(ListNode* head) {
        curr = head;
        solve(head);
    }
};
