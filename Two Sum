class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {

// First Approach
        unordered_map<int, int> map;
        for(int i = 0 ; i < nums.size(); i++){

            if(map.find(target - nums[i]) != map.end()){
                int complement = target - nums[i];
                int firstindex = map.find(complement)->second;
                int secondindex = i;
                return {firstindex, secondindex};
            } else {
               map[nums[i]]=i;
            }
        }
        return {-1,-1};


// Second Approach
        unordered_map<int, int> map;
        for(int i = 0 ; i < nums.size(); i++){
            int complement = target - nums[i];
            if(map.find(complement) !=map.end()){
                return {map[complement], i};
            } else {
                map.insert({nums[i], i});
            }
        }
        return {};
    }
};
